#!/usr/bin/env python3
"""
–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –≤ Unified Account
–†–∞–±–æ—Ç–∞–µ—Ç —Å v5 API –¥–ª—è Unified Account
"""

import os
import json
import time
import urllib.request
import urllib.parse
import hmac
import hashlib
from typing import Dict, List

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
API_KEY = os.environ.get("BYBIT_API_KEY", "")
API_SECRET = os.environ.get("BYBIT_API_SECRET", "")
ACCOUNT_TYPE = os.environ.get("BYBIT_ACCOUNT_TYPE", "unified")

if not API_KEY or not API_SECRET:
    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã API –∫–ª—é—á–∏ Bybit")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("export BYBIT_API_KEY=–≤–∞—à_–∫–ª—é—á")
    print("export BYBIT_API_SECRET=–≤–∞—à_—Å–µ–∫—Ä–µ—Ç")
    exit(1)

# ========== BYBIT API –ö–õ–ò–ï–ù–¢ ==========
class BybitClient:
    def __init__(self, api_key: str, api_secret: str):
        self.api_key = api_key
        self.api_secret = api_secret
        self.base_url = "https://api.bybit.com"
    
    def _sign_request(self, params: str) -> str:
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è Bybit"""
        return hmac.new(
            self.api_secret.encode('utf-8'),
            params.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
    
    def _make_request(self, endpoint: str, params: Dict = None, method: str = "GET") -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å API –∑–∞–ø—Ä–æ—Å"""
        try:
            timestamp = str(int(time.time() * 1000))
            
            if params is None:
                params = {}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params.update({
                "api_key": self.api_key,
                "timestamp": timestamp,
                "recv_window": "5000"
            })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            sorted_params = "&".join([f"{k}={v}" for k, v in sorted(params.items())])
            signature = self._sign_request(sorted_params)
            params["sign"] = signature
            
            url = f"{self.base_url}{endpoint}"
            
            if method == "GET":
                url += "?" + "&".join([f"{k}={v}" for k, v in params.items()])
                request = urllib.request.Request(url)
            else:
                data = urllib.parse.urlencode(params).encode('utf-8')
                request = urllib.request.Request(url, data=data, method=method)
                request.add_header('Content-Type', 'application/x-www-form-urlencoded')
            
            with urllib.request.urlopen(request) as response:
                result = json.loads(response.read().decode())
                return result
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {}
    
    def get_wallet_balance(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞"""
        endpoint = "/v5/account/wallet-balance"
        params = {"accountType": ACCOUNT_TYPE}
        return self._make_request(endpoint, params)
    
    def get_positions_unified(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ Unified Account"""
        endpoint = "/v5/position/list"
        params = {"category": "linear", "settleCoin": "USDT"}
        return self._make_request(endpoint, params)
    
    def get_open_orders_unified(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –≤ Unified Account"""
        endpoint = "/v5/order/realtime"
        params = {"category": "linear", "settleCoin": "USDT"}
        return self._make_request(endpoint, params)
    
    def get_spot_orders_unified(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–æ—Ç –æ—Ä–¥–µ—Ä–∞ –≤ Unified Account"""
        endpoint = "/v5/order/realtime"
        params = {"category": "spot"}
        return self._make_request(endpoint, params)
    
    def cancel_order_unified(self, order_id: str, symbol: str) -> Dict:
        """–û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä"""
        endpoint = "/v5/order/cancel"
        params = {
            "category": "linear",
            "symbol": symbol,
            "orderId": order_id
        }
        return self._make_request(endpoint, params, "POST")
    
    def cancel_all_orders_unified(self) -> Dict:
        """–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        endpoint = "/v5/order/cancelAll"
        params = {"category": "linear"}
        return self._make_request(endpoint, params, "POST")
    
    def close_position_unified(self, symbol: str, side: str, size: str) -> Dict:
        """–ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ Unified Account"""
        endpoint = "/v5/order/create"
        params = {
            "category": "linear",
            "symbol": symbol,
            "side": "Buy" if side == "Sell" else "Sell",
            "orderType": "Market",
            "qty": size,
            "reduceOnly": "true"
        }
        return self._make_request(endpoint, params, "POST")

# ========== –£–¢–ò–õ–ò–¢–´ ==========
def safe_float(value, default=0.0):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
    try:
        if value is None or value == "":
            return default
        return float(value)
    except (ValueError, TypeError):
        return default

# ========== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ==========
def main():
    print("üîì –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –≤ Unified Account")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç
    client = BybitClient(API_KEY, API_SECRET)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    print("üí∞ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å...")
    balance = client.get_wallet_balance()
    
    if "result" not in balance or "list" not in balance["result"]:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
        return
    
    account = balance["result"]["list"][0]
    print(f"  –ê–∫–∫–∞—É–Ω—Ç: {account['accountType']}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
    total_locked = 0
    locked_assets = []
    
    for coin in account.get("coin", []):
        currency = coin.get("coin", "Unknown")
        total = safe_float(coin.get("walletBalance", 0))
        free = safe_float(coin.get("availableToWithdraw", 0))
        usd_value = safe_float(coin.get("usdValue", 0))
        
        if total > 0 and free == 0:
            total_locked += usd_value
            locked_assets.append({
                "currency": currency,
                "amount": total,
                "usd_value": usd_value
            })
            print(f"  üîí {currency}: {total:.8f} (${usd_value:.2f})")
    
    print(f"\nüìä –ò—Ç–æ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {total_locked:.2f} USD")
    
    if total_locked == 0:
        print("‚úÖ –í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–≤–æ–±–æ–¥–Ω—ã!")
        return
    
    # 2. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    print(f"\nüìä –ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏...")
    positions = client.get_positions_unified()
    
    print(f"üì° –û—Ç–≤–µ—Ç API –ø–æ–∑–∏—Ü–∏–π: {json.dumps(positions, indent=2)}")
    
    if "result" in positions and "list" in positions["result"]:
        pos_list = positions["result"]["list"]
        active_positions = [p for p in pos_list if safe_float(p.get("size", 0)) > 0]
        
        if active_positions:
            print(f"  –ù–∞–π–¥–µ–Ω–æ {len(active_positions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:")
            for pos in active_positions:
                symbol = pos.get("symbol", "Unknown")
                side = pos.get("side", "Unknown")
                size = safe_float(pos.get("size", 0))
                pnl = safe_float(pos.get("unrealisedPnl", 0))
                
                print(f"    {symbol} {side} {size:.6f} PnL: {pnl:.4f}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é
                if size > 0:
                    print(f"      üîÑ –ó–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é...")
                    result = client.close_position_unified(symbol, side, str(size))
                    
                    if result.get("retCode") == 0:
                        print(f"        ‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
                    else:
                        print(f"        ‚ùå –û—à–∏–±–∫–∞: {result.get('retMsg', 'Unknown')}")
                    
                    time.sleep(1)
        else:
            print("  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏")
    
    # 3. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–¥–µ—Ä–∞
    print(f"\nüìù –ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–¥–µ—Ä–∞...")
    futures_orders = client.get_open_orders_unified()
    
    print(f"üì° –û—Ç–≤–µ—Ç API —Ñ—å—é—á–µ—Ä—Å –æ—Ä–¥–µ—Ä–æ–≤: {json.dumps(futures_orders, indent=2)}")
    
    if "result" in futures_orders and "list" in futures_orders["result"]:
        orders = futures_orders["result"]["list"]
        active_orders = [o for o in orders if o.get("orderStatus") == "New"]
        
        if active_orders:
            print(f"  –ù–∞–π–¥–µ–Ω–æ {len(active_orders)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:")
            for order in active_orders:
                symbol = order.get("symbol", "Unknown")
                side = order.get("side", "Unknown")
                qty = safe_float(order.get("qty", 0))
                price = safe_float(order.get("price", 0))
                order_id = order.get("orderId", "Unknown")
                
                print(f"    {symbol} {side} {qty:.6f} @ {price:.4f} (ID: {order_id})")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä
                print(f"      üîÑ –û—Ç–º–µ–Ω—è—é –æ—Ä–¥–µ—Ä...")
                result = client.cancel_order_unified(order_id, symbol)
                
                if result.get("retCode") == 0:
                    print(f"        ‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω")
                else:
                    print(f"        ‚ùå –û—à–∏–±–∫–∞: {result.get('retMsg', 'Unknown')}")
                
                time.sleep(1)
        else:
            print("  ‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–¥–µ—Ä–∞")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–æ—Ç –æ—Ä–¥–µ—Ä–∞
    print(f"\nüìù –ü—Ä–æ–≤–µ—Ä—è—é —Å–ø–æ—Ç –æ—Ä–¥–µ—Ä–∞...")
    spot_orders = client.get_spot_orders_unified()
    
    if "result" in spot_orders and "list" in spot_orders["result"]:
        orders = spot_orders["result"]["list"]
        active_orders = [o for o in orders if o.get("orderStatus") == "New"]
        
        if active_orders:
            print(f"  –ù–∞–π–¥–µ–Ω–æ {len(active_orders)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–ø–æ—Ç –æ—Ä–¥–µ—Ä–æ–≤:")
            for order in active_orders:
                symbol = order.get("symbol", "Unknown")
                side = order.get("side", "Unknown")
                qty = safe_float(order.get("qty", 0))
                price = safe_float(order.get("price", 0))
                order_id = order.get("orderId", "Unknown")
                
                print(f"    {symbol} {side} {qty:.6f} @ {price:.4f} (ID: {order_id})")
        else:
            print("  ‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö —Å–ø–æ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç")
    else:
        print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–æ—Ç –æ—Ä–¥–µ—Ä–∞")
    
    # 5. –ñ–¥—ë–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    print(f"\n‚è≥ –ñ–¥—É 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤...")
    time.sleep(15)
    
    print(f"üìä –ü—Ä–æ–≤–µ—Ä—è—é –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è...")
    final_balance = client.get_wallet_balance()
    
    if "result" in final_balance and "list" in final_balance["result"]:
        account = final_balance["result"]["list"][0]
        
        total_free = 0
        for coin in account.get("coin", []):
            currency = coin.get("coin", "")
            free = safe_float(coin.get("availableToWithdraw", 0))
            usd_value = safe_float(coin.get("usdValue", 0))
            
            if free > 0:
                print(f"  üí∞ {currency}: {free:.8f} (${usd_value:.2f})")
                if currency == "USDT":
                    total_free += free
                else:
                    total_free += usd_value
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        if total_free > 10:
            print(f"  ‚úÖ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {total_free:.2f} USD")
            print("  üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ USDT!")
        else:
            print(f"  ‚ö†Ô∏è –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–∞–ª–æ: {total_free:.2f} USD")
            print("  üîç –ù—É–∂–Ω–∞ —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Bybit")
            print("  üí° –í–æ–∑–º–æ–∂–Ω–æ, –∞–∫—Ç–∏–≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–ø–æ—Ç–µ")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å")

if __name__ == "__main__":
    main()
