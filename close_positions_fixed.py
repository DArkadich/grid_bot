#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π L1 Bot
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
"""

import os
import json
import time
import urllib.request
import urllib.parse
import hmac
import hashlib
from typing import Dict, List

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
API_KEY = os.environ.get("BYBIT_API_KEY", "")
API_SECRET = os.environ.get("BYBIT_API_SECRET", "")
ACCOUNT_TYPE = os.environ.get("BYBIT_ACCOUNT_TYPE", "unified")

if not API_KEY or not API_SECRET:
    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã API –∫–ª—é—á–∏ Bybit")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("export BYBIT_API_KEY=–≤–∞—à_–∫–ª—é—á")
    print("export BYBIT_API_SECRET=–≤–∞—à_—Å–µ–∫—Ä–µ—Ç")
    exit(1)

# ========== BYBIT API –ö–õ–ò–ï–ù–¢ ==========
class BybitClient:
    def __init__(self, api_key: str, api_secret: str):
        self.api_key = api_key
        self.api_secret = api_secret
        self.base_url = "https://api.bybit.com"
    
    def _sign_request(self, params: str) -> str:
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è Bybit"""
        return hmac.new(
            self.api_secret.encode('utf-8'),
            params.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
    
    def _make_request(self, endpoint: str, params: Dict = None, method: str = "GET") -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å API –∑–∞–ø—Ä–æ—Å"""
        try:
            timestamp = str(int(time.time() * 1000))
            
            if params is None:
                params = {}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params.update({
                "api_key": self.api_key,
                "timestamp": timestamp,
                "recv_window": "5000"
            })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            sorted_params = "&".join([f"{k}={v}" for k, v in sorted(params.items())])
            signature = self._sign_request(sorted_params)
            params["sign"] = signature
            
            url = f"{self.base_url}{endpoint}"
            
            if method == "GET":
                url += "?" + "&".join([f"{k}={v}" for k, v in params.items()])
                request = urllib.request.Request(url)
            else:
                data = urllib.parse.urlencode(params).encode('utf-8')
                request = urllib.request.Request(url, data=data, method=method)
                request.add_header('Content-Type', 'application/x-www-form-urlencoded')
            
            with urllib.request.urlopen(request) as response:
                result = json.loads(response.read().decode())
                return result
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {}
    
    def get_positions_unified(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ Unified Account"""
        endpoint = "/v5/position/list"
        params = {"category": "linear", "settleCoin": "USDT"}
        return self._make_request(endpoint, params)
    
    def close_position_market(self, symbol: str, side: str, size: str) -> Dict:
        """–ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é —Ä—ã–Ω–æ—á–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º"""
        endpoint = "/v5/order/create"
        
        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        close_side = "Buy" if side == "Sell" else "Sell"
        
        params = {
            "category": "linear",
            "symbol": symbol,
            "side": close_side,
            "orderType": "Market",
            "qty": size,
            "reduceOnly": "true"
        }
        
        print(f"    üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫—Ä—ã—Ç–∏—è: {params}")
        return self._make_request(endpoint, params, "POST")
    
    def close_position_limit(self, symbol: str, side: str, size: str, price: str) -> Dict:
        """–ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –ª–∏–º–∏—Ç–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º"""
        endpoint = "/v5/order/create"
        
        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        close_side = "Buy" if side == "Sell" else "Sell"
        
        params = {
            "category": "linear",
            "symbol": symbol,
            "side": close_side,
            "orderType": "Limit",
            "qty": size,
            "price": price,
            "reduceOnly": "true"
        }
        
        print(f"    üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫—Ä—ã—Ç–∏—è: {params}")
        return self._make_request(endpoint, params, "POST")
    
    def get_wallet_balance(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞"""
        endpoint = "/v5/account/wallet-balance"
        params = {"accountType": ACCOUNT_TYPE}
        return self._make_request(endpoint, params)

# ========== –£–¢–ò–õ–ò–¢–´ ==========
def safe_float(value, default=0.0):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
    try:
        if value is None or value == "":
            return default
        return float(value)
    except (ValueError, TypeError):
        return default

# ========== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ==========
def main():
    print("üîì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π L1 Bot")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç
    client = BybitClient(API_KEY, API_SECRET)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    print("üìä –ü–æ–ª—É—á–∞—é —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏...")
    positions = client.get_positions_unified()
    
    if "result" not in positions or "list" not in positions["result"]:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏")
        return
    
    pos_list = positions["result"]["list"]
    active_positions = [p for p in pos_list if safe_float(p.get("size", 0)) > 0]
    
    if not active_positions:
        print("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç")
        return
    
    print(f"  –ù–∞–π–¥–µ–Ω–æ {len(active_positions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:")
    
    # 2. –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
    total_closed = 0
    
    for pos in active_positions:
        symbol = pos.get("symbol", "Unknown")
        side = pos.get("side", "Unknown")
        size = pos.get("size", "0")
        mark_price = pos.get("markPrice", "0")
        pnl = safe_float(pos.get("unrealisedPnl", 0))
        
        print(f"\n  üîÑ –ó–∞–∫—Ä—ã–≤–∞—é {symbol} {side} {size} (PnL: {pnl:.4f})")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º
        print(f"    üìà –ü—ã—Ç–∞—é—Å—å –∑–∞–∫—Ä—ã—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º...")
        result = client.close_position_market(symbol, side, size)
        
        if result.get("retCode") == 0:
            order_id = result.get("result", {}).get("orderId", "Unknown")
            print(f"      ‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ —Ä—ã–Ω–æ—á–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º: {order_id}")
            total_closed += 1
        else:
            print(f"      ‚ùå –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {result.get('retMsg', 'Unknown')}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å –ª–∏–º–∏—Ç–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º
            print(f"    üìâ –ü—ã—Ç–∞—é—Å—å –∑–∞–∫—Ä—ã—Ç—å –ª–∏–º–∏—Ç–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º...")
            limit_result = client.close_position_limit(symbol, side, size, mark_price)
            
            if limit_result.get("retCode") == 0:
                order_id = limit_result.get("result", {}).get("orderId", "Unknown")
                print(f"      ‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –ª–∏–º–∏—Ç–Ω—ã–º –æ—Ä–¥–µ—Ä–æ–º: {order_id}")
                total_closed += 1
            else:
                print(f"      ‚ùå –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {limit_result.get('retMsg', 'Unknown')}")
                print(f"      ‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {symbol} –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞!")
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        time.sleep(2)
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π:")
    print(f"  –ó–∞–∫—Ä—ã—Ç–æ: {total_closed}/{len(active_positions)}")
    
    if total_closed == len(active_positions):
        print("  ‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã!")
        
        # –ñ–¥—ë–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        print(f"\n‚è≥ –ñ–¥—É 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤...")
        time.sleep(20)
        
        print(f"üìä –ü—Ä–æ–≤–µ—Ä—è—é –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è...")
        final_balance = client.get_wallet_balance()
        
        if "result" in final_balance and "list" in final_balance["result"]:
            account = final_balance["result"]["list"][0]
            
            total_free = 0
            for coin in account.get("coin", []):
                currency = coin.get("coin", "")
                free = safe_float(coin.get("availableToWithdraw", 0))
                usd_value = safe_float(coin.get("usdValue", 0))
                
                if free > 0:
                    print(f"  üí∞ {currency}: {free:.8f} (${usd_value:.2f})")
                    if currency == "USDT":
                        total_free += free
                    else:
                        total_free += usd_value
            
            print(f"\nüìä –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
            if total_free > 10:
                print(f"  ‚úÖ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: {total_free:.2f} USD")
                print("  üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ USDT!")
            else:
                print(f"  ‚ö†Ô∏è –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–∞–ª–æ: {total_free:.2f} USD")
                print("  üîç –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å")
    else:
        print(f"  ‚ö†Ô∏è –ù–µ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã ({len(active_positions) - total_closed} –æ—Å—Ç–∞–ª–æ—Å—å)")
        print("  üîç –ù—É–∂–Ω–∞ —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Bybit")

if __name__ == "__main__":
    main()
