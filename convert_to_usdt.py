#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤ –≤ USDT
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–∞—ë—Ç –≤—Å–µ –≤–∞–ª—é—Ç—ã (–∫—Ä–æ–º–µ USDT) –∑–∞ USDT
"""

import os
import json
import time
import urllib.request
import urllib.parse
import hmac
import hashlib
from typing import Dict, List

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
API_KEY = os.environ.get("BYBIT_API_KEY", "")
API_SECRET = os.environ.get("BYBIT_API_SECRET", "")
ACCOUNT_TYPE = os.environ.get("BYBIT_ACCOUNT_TYPE", "unified")

if not API_KEY or not API_SECRET:
    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã API –∫–ª—é—á–∏ Bybit")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("export BYBIT_API_KEY=–≤–∞—à_–∫–ª—é—á")
    print("export BYBIT_API_SECRET=–≤–∞—à_—Å–µ–∫—Ä–µ—Ç")
    exit(1)

# ========== BYBIT API –ö–õ–ò–ï–ù–¢ ==========
class BybitClient:
    def __init__(self, api_key: str, api_secret: str):
        self.api_key = api_key
        self.api_secret = api_secret
        self.base_url = "https://api.bybit.com"
    
    def _sign_request(self, params: str) -> str:
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è Bybit"""
        return hmac.new(
            self.api_secret.encode('utf-8'),
            params.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
    
    def _make_request(self, endpoint: str, params: Dict = None, method: str = "GET") -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å API –∑–∞–ø—Ä–æ—Å"""
        try:
            timestamp = str(int(time.time() * 1000))
            
            if params is None:
                params = {}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params.update({
                "api_key": self.api_key,
                "timestamp": timestamp,
                "recv_window": "5000"
            })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            sorted_params = "&".join([f"{k}={v}" for k, v in sorted(params.items())])
            signature = self._sign_request(sorted_params)
            params["sign"] = signature
            
            url = f"{self.base_url}{endpoint}"
            
            if method == "GET":
                url += "?" + "&".join([f"{k}={v}" for k, v in params.items()])
                request = urllib.request.Request(url)
            else:
                data = urllib.parse.urlencode(params).encode('utf-8')
                request = urllib.request.Request(url, data=data, method=method)
                request.add_header('Content-Type', 'application/x-www-form-urlencoded')
            
            with urllib.request.urlopen(request) as response:
                result = json.loads(response.read().decode())
                return result
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {}
    
    def get_wallet_balance(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞"""
        endpoint = "/v5/account/wallet-balance"
        params = {"accountType": ACCOUNT_TYPE}
        return self._make_request(endpoint, params)
    
    def get_ticker(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã"""
        endpoint = "/v5/market/tickers"
        params = {"category": "spot", "symbol": symbol}
        return self._make_request(endpoint, params)
    
    def create_spot_order(self, symbol: str, side: str, qty: str, order_type: str = "Market") -> Dict:
        """–°–æ–∑–¥–∞—Ç—å —Å–ø–æ—Ç –æ—Ä–¥–µ—Ä"""
        endpoint = "/v5/order/create"
        params = {
            "category": "spot",
            "symbol": symbol,
            "side": side,
            "orderType": order_type,
            "qty": qty
        }
        return self._make_request(endpoint, params, "POST")

# ========== –£–¢–ò–õ–ò–¢–´ ==========
def safe_float(value, default=0.0):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
    try:
        if value is None or value == "":
            return default
        return float(value)
    except (ValueError, TypeError):
        return default

def get_spot_symbol(base_currency: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª –¥–ª—è —Å–ø–æ—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    if base_currency == "USDT":
        return None
    return f"{base_currency}USDT"

# ========== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ==========
def main():
    print("üöÄ –°–∫—Ä–∏–ø—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤ –≤ USDT")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç
    client = BybitClient(API_KEY, API_SECRET)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    print("üí∞ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å...")
    balance = client.get_wallet_balance()
    
    if "result" not in balance or "list" not in balance["result"]:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
        return
    
    account = balance["result"]["list"][0]
    print(f"  –ê–∫–∫–∞—É–Ω—Ç: {account['accountType']}")
    
    # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞–∫—Ç–∏–≤—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏...")
    
    assets_to_convert = []
    total_equity_usd = 0
    
    for coin in account.get("coin", []):
        currency = coin.get("coin", "Unknown")
        total = safe_float(coin.get("walletBalance", 0))
        free = safe_float(coin.get("availableToWithdraw", 0))
        equity = safe_float(coin.get("equity", 0))
        usd_value = safe_float(coin.get("usdValue", 0))
        
        print(f"  {currency}:")
        print(f"    Total: {total:.8f}")
        print(f"    Free: {free:.8f}")
        print(f"    Equity: {equity:.8f}")
        print(f"    USD Value: {usd_value:.4f}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–∫—Ä–æ–º–µ USDT –∏ –ø—ã–ª–∏)
        if currency != "USDT" and free > 0.001 and usd_value > 0.1:
            assets_to_convert.append({
                "currency": currency,
                "amount": free,
                "usd_value": usd_value,
                "symbol": get_spot_symbol(currency)
            })
            print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        elif currency == "USDT":
            print(f"    üí∞ USDT - –æ—Å—Ç–∞–≤–ª—è–µ–º")
        else:
            print(f"    ‚ö†Ô∏è –ü—ã–ª—å –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        
        total_equity_usd += usd_value
    
    print(f"\nüíµ –û–±—â–∏–π equity –≤ USD: {total_equity_usd:.4f}")
    
    if not assets_to_convert:
        print("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!")
        return
    
    # 3. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤—ã –≤ USDT
    print(f"\nüîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é {len(assets_to_convert)} –∞–∫—Ç–∏–≤–æ–≤ –≤ USDT...")
    
    converted_total = 0
    
    for asset in assets_to_convert:
        currency = asset["currency"]
        amount = asset["amount"]
        symbol = asset["symbol"]
        
        if not symbol:
            print(f"  ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é {currency} - –Ω–µ—Ç —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
            continue
        
        print(f"\n  üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é {amount:.8f} {currency} –≤ USDT...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ticker = client.get_ticker(symbol)
            if "result" in ticker and "list" in ticker["result"]:
                ticker_data = ticker["result"]["list"][0]
                last_price = safe_float(ticker_data.get("lastPrice", 0))
                
                if last_price > 0:
                    estimated_usdt = amount * last_price
                    print(f"    –¶–µ–Ω–∞: {last_price:.6f} USDT")
                    print(f"    –û–∂–∏–¥–∞–µ–º–æ: {estimated_usdt:.4f} USDT")
                    
                    # –°–æ–∑–¥–∞—ë–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                    result = client.create_spot_order(symbol, "Sell", str(amount))
                    
                    if result.get("retCode") == 0:
                        order_id = result.get("result", {}).get("orderId", "Unknown")
                        print(f"    ‚úÖ –û—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {order_id}")
                        converted_total += estimated_usdt
                    else:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {result.get('retMsg', 'Unknown')}")
                else:
                    print(f"    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
            else:
                print(f"    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ä –¥–ª—è {symbol}")
                
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {currency}: {e}")
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏
        time.sleep(2)
    
    # 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print(f"\n" + "=" * 60)
    print("üìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...")
    
    final_balance = client.get_wallet_balance()
    if "result" in final_balance and "list" in final_balance["result"]:
        account = final_balance["result"]["list"][0]
        
        usdt_final = 0
        total_equity_final = 0
        
        for coin in account.get("coin", []):
            currency = coin.get("coin", "")
            if currency == "USDT":
                usdt_final = safe_float(coin.get("availableToWithdraw", 0))
                print(f"  USDT Final: {usdt_final:.4f}")
            else:
                usd_value = safe_float(coin.get("usdValue", 0))
                total_equity_final += usd_value
        
        print(f"  –û–±—â–∏–π equity Final: {total_equity_final:.4f}")
        
        if usdt_final > 10:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {usdt_final:.2f} USDT!")
            print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å Grid Trading Bot!")
        else:
            print(f"‚ö†Ô∏è USDT –≤—Å—ë –µ—â—ë –º–∞–ª–æ: {usdt_final:.2f}")
            print("–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å")

if __name__ == "__main__":
    main()
