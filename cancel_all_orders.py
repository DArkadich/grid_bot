#!/usr/bin/env python3
"""
–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–ø–æ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ Bybit
–î–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
"""

import os
import json
import time
import urllib.request
import urllib.parse
import hmac
import hashlib
from typing import Dict, List

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
API_KEY = os.environ.get("BYBIT_API_KEY", "")
API_SECRET = os.environ.get("BYBIT_API_SECRET", "")

if not API_KEY or not API_SECRET:
    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã API –∫–ª—é—á–∏ Bybit")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("export BYBIT_API_KEY=–≤–∞—à_–∫–ª—é—á")
    print("export BYBIT_API_SECRET=–≤–∞—à_—Å–µ–∫—Ä–µ—Ç")
    exit(1)

# ========== BYBIT API –ö–õ–ò–ï–ù–¢ ==========
class BybitClient:
    def __init__(self, api_key: str, api_secret: str):
        self.api_key = api_key
        self.api_secret = api_secret
        self.base_url = "https://api.bybit.com"
    
    def _sign_request(self, params: str) -> str:
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è Bybit"""
        return hmac.new(
            self.api_secret.encode('utf-8'),
            params.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
    
    def _make_request(self, endpoint: str, params: Dict = None, method: str = "GET") -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å API –∑–∞–ø—Ä–æ—Å"""
        try:
            timestamp = str(int(time.time() * 1000))
            
            if params is None:
                params = {}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params.update({
                "api_key": self.api_key,
                "timestamp": timestamp,
                "recv_window": "5000"
            })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            sorted_params = "&".join([f"{k}={v}" for k, v in sorted(params.items())])
            signature = self._sign_request(sorted_params)
            params["sign"] = signature
            
            url = f"{self.base_url}{endpoint}"
            
            if method == "GET":
                url += "?" + "&".join([f"{k}={v}" for k, v in params.items()])
                request = urllib.request.Request(url)
            else:
                data = urllib.parse.urlencode(params).encode('utf-8')
                request = urllib.request.Request(url, data=data, method=method)
                request.add_header('Content-Type', 'application/x-www-form-urlencoded')
            
            with urllib.request.urlopen(request) as response:
                result = json.loads(response.read().decode())
                return result
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {}
    
    def get_spot_orders(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–ø–æ—Ç –æ—Ä–¥–µ—Ä–∞"""
        endpoint = "/v5/order/realtime"
        params = {"category": "spot"}
        return self._make_request(endpoint, params)
    
    def cancel_order(self, symbol: str, order_id: str) -> Dict:
        """–û—Ç–º–µ–Ω–∏—Ç—å —Å–ø–æ—Ç –æ—Ä–¥–µ—Ä"""
        endpoint = "/v5/order/cancel"
        params = {
            "category": "spot",
            "symbol": symbol,
            "orderId": order_id
        }
        return self._make_request(endpoint, params, "POST")
    
    def get_wallet_balance(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞"""
        endpoint = "/v5/account/wallet-balance"
        params = {"accountType": "unified"}
        return self._make_request(endpoint, params)

# ========== –£–¢–ò–õ–ò–¢–´ ==========
def safe_float(value, default=0.0):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
    try:
        if value is None or value == "":
            return default
        return float(value)
    except (ValueError, TypeError):
        return default

# ========== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ==========
def main():
    print("üö® –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–ø–æ—Ç –æ—Ä–¥–µ—Ä–æ–≤")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç
    client = BybitClient(API_KEY, API_SECRET)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    print("üí∞ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å...")
    balance = client.get_wallet_balance()
    
    if "result" in balance and "list" in balance["result"]:
        account = balance["result"]["list"][0]
        usdt_coin = None
        
        for coin in account.get("coin", []):
            if coin.get("coin") == "USDT":
                usdt_coin = coin
                break
        
        if usdt_coin:
            total = safe_float(usdt_coin.get("walletBalance", 0))
            free = safe_float(usdt_coin.get("availableToWithdraw", 0))
            locked = safe_float(usdt_coin.get("locked", 0))
            
            print(f"  USDT: Total: {total:.8f}, Free: {free:.8f}, Locked: {locked:.8f}")
        else:
            print("  ‚ùå USDT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–ª–∞–Ω—Å–µ")
    else:
        print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–ø–æ—Ç –æ—Ä–¥–µ—Ä–∞
    print(f"\nüìã –ü–æ–ª—É—á–∞—é –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–ø–æ—Ç –æ—Ä–¥–µ—Ä–∞...")
    orders = client.get_spot_orders()
    
    if "result" not in orders or "list" not in orders["result"]:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–¥–µ—Ä–∞")
        return
    
    order_list = orders["result"]["list"]
    open_orders = [o for o in order_list if o.get("orderStatus") == "New"]
    
    if not open_orders:
        print("‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö —Å–ø–æ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç")
        return
    
    print(f"  –ù–∞–π–¥–µ–Ω–æ {len(open_orders)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:")
    
    # 3. –û—Ç–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä
    total_cancelled = 0
    
    for order in open_orders:
        symbol = order.get("symbol", "Unknown")
        side = order.get("side", "Unknown")
        qty = safe_float(order.get("qty", 0))
        price = safe_float(order.get("price", 0))
        order_id = order.get("orderId", "Unknown")
        
        print(f"\n  üîÑ –û—Ç–º–µ–Ω—è—é {symbol} {side} {qty} @ {price}")
        print(f"      ID: {order_id}")
        
        # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä
        result = client.cancel_order(symbol, order_id)
        
        if result.get("retCode") == 0:
            print(f"      ‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω")
            total_cancelled += 1
        else:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: {result.get('retMsg', 'Unknown')}")
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        time.sleep(1)
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤:")
    print(f"  –û—Ç–º–µ–Ω–µ–Ω–æ: {total_cancelled}/{len(open_orders)}")
    
    if total_cancelled == len(open_orders):
        print("  ‚úÖ –í—Å–µ –æ—Ä–¥–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã!")
        
        # –ñ–¥—ë–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        print(f"\n‚è≥ –ñ–¥—É 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤...")
        time.sleep(10)
        
        print(f"üí∞ –ü—Ä–æ–≤–µ—Ä—è—é –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã...")
        final_balance = client.get_wallet_balance()
        
        if "result" in final_balance and "list" in final_balance["result"]:
            account = final_balance["result"]["list"][0]
            
            for coin in account.get("coin", []):
                if coin.get("coin") == "USDT":
                    total = safe_float(coin.get("walletBalance", 0))
                    free = safe_float(coin.get("availableToWithdraw", 0))
                    locked = safe_float(coin.get("locked", 0))
                    
                    print(f"  USDT: Total: {total:.8f}, Free: {free:.8f}, Locked: {locked:.8f}")
                    
                    if free > 0:
                        print(f"\nüéâ –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã! –°–≤–æ–±–æ–¥–Ω–æ: {free:.2f} USDT")
                    else:
                        print(f"\n‚ö†Ô∏è –°—Ä–µ–¥—Å—Ç–≤–∞ –≤—Å—ë –µ—â—ë –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")
                    break
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å")
    else:
        print(f"  ‚ö†Ô∏è –ù–µ –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã ({len(open_orders) - total_cancelled} –æ—Å—Ç–∞–ª–æ—Å—å)")
        print("  üîç –ù—É–∂–Ω–∞ —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Bybit")

if __name__ == "__main__":
    main()
