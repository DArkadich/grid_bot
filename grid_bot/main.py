"""
Grid Trading Bot - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ —Å–µ—Ç–∫–µ —Ü–µ–Ω

–í–°–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ù–ê–°–¢–†–ê–ò–í–ê–Æ–¢–°–Ø –ß–ï–†–ï–ó .env –§–ê–ô–õ:

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï:
- BYBIT_API_KEY - API –∫–ª—é—á Bybit
- BYBIT_API_SECRET - API —Å–µ–∫—Ä–µ—Ç Bybit
- SYMBOLS - —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: DOGE/USDT,WIF/USDT,JUP/USDT)

–ü–ê–†–ê–ú–ï–¢–†–´ –°–ï–¢–ö–ò:
- GRID_LEVELS - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π —Å–µ—Ç–∫–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 5)
- GRID_SPREAD - —Å–ø—Ä–µ–¥ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ –≤ % (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 0.005 = 0.5%)
- LEVEL_AMOUNT - USDT –Ω–∞ —É—Ä–æ–≤–µ–Ω—å (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 25)

–¶–ï–õ–¨: 5-15% –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å —Å —É–∑–∫–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∫–æ–π
"""

import ccxt
import sqlite3
import time
import os
from datetime import datetime
from typing import Dict, List, Tuple
from dataclasses import dataclass
from telegram import Bot

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
@dataclass
class GridConfig:
    # API
    api_key: str = os.environ.get("BYBIT_API_KEY")
    api_secret: str = os.environ.get("BYBIT_API_SECRET")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏
    grid_levels: int = int(os.environ.get("GRID_LEVELS"))  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π
    grid_spread: float = float(os.environ.get("GRID_SPREAD"))  # % –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
    level_amount: float = float(os.environ.get("LEVEL_AMOUNT"))  # USDT –Ω–∞ —É—Ä–æ–≤–µ–Ω—å
    
    # –ü–∞—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    symbols: List[str] = None
    
    def __post_init__(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not self.api_key:
            raise ValueError("BYBIT_API_KEY –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        if not self.api_secret:
            raise ValueError("BYBIT_API_SECRET –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏
        if not os.environ.get("GRID_LEVELS"):
            raise ValueError("GRID_LEVELS –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        if not os.environ.get("GRID_SPREAD"):
            raise ValueError("GRID_SPREAD –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        if not os.environ.get("LEVEL_AMOUNT"):
            raise ValueError("LEVEL_AMOUNT –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        if not self.symbols:
            # –ß–∏—Ç–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env_symbols = os.environ.get("SYMBOLS")
            if not env_symbols:
                raise ValueError("SYMBOLS –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            self.symbols = [s.strip() for s in env_symbols.split(",")]

# ========== –ö–õ–ò–ï–ù–¢ –ë–ò–†–ñ–ò ==========
class BybitClient:
    def __init__(self, config: GridConfig):
        self.exchange = ccxt.bybit({
            "apiKey": config.api_key,
            "secret": config.api_secret,
            "enableRateLimit": True,
            "options": {"defaultType": "unified"}
        })
        self.exchange.load_markets()
    
    def get_ticker(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã"""
        try:
            ticker = self.exchange.fetch_ticker(symbol)
            return {
                "bid": float(ticker["bid"]),
                "ask": float(ticker["ask"]),
                "last": float(ticker["last"]),
                "volume": float(ticker["baseVolume"])
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞ {symbol}: {e}")
            return {}
    
    def get_balance(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT"""
        try:
            balance = self.exchange.fetch_balance()
            if 'USDT' in balance and 'free' in balance['USDT']:
                return float(balance['USDT']['free'])
            return 0.0
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return 0.0
    
    def place_order(self, symbol: str, side: str, amount: float, price: float) -> Dict:
        """–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä"""
        try:
            order = self.exchange.create_order(
                symbol=symbol,
                type="limit",
                side=side,
                amount=amount,
                price=price
            )
            return order
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {symbol}: {e}")
            return {}

# ========== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–¢–ö–û–ô ==========
class GridManager:
    def __init__(self, client: BybitClient, config: GridConfig):
        self.client = client
        self.config = config
        self.grids: Dict[str, List[Dict]] = {}
        self.db_path = "/app/shared/grid_trading.db"
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Ç–æ–∫
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS grids (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    symbol TEXT NOT NULL,
                    level INTEGER NOT NULL,
                    side TEXT NOT NULL,
                    amount REAL NOT NULL,
                    price REAL NOT NULL,
                    order_id TEXT,
                    status TEXT DEFAULT 'pending',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS trades (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    symbol TEXT NOT NULL,
                    side TEXT NOT NULL,
                    amount REAL NOT NULL,
                    price REAL NOT NULL,
                    profit REAL DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            conn.commit()
            conn.close()
            print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    def check_available_balance(self, required_amount: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        try:
            available_balance = self.client.get_balance()
            if available_balance >= required_amount:
                print(f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ USDT: {available_balance:.2f}, –Ω—É–∂–Ω–æ: {required_amount:.2f}")
                return True
            else:
                print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: –¥–æ—Å—Ç—É–ø–Ω–æ {available_balance:.2f} USDT, –Ω—É–∂–Ω–æ {required_amount:.2f} USDT")
                return False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return False
    
    def load_existing_grids(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ç–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–µ—Ç–∫–∞–º–∏
            cursor.execute("SELECT DISTINCT symbol FROM grids")
            symbols = [row[0] for row in cursor.fetchall()]
            
            for symbol in symbols:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
                cursor.execute("""
                    SELECT level, side, amount, price, order_id, status 
                    FROM grids 
                    WHERE symbol = ? 
                    ORDER BY level, side
                """, (symbol,))
                
                grid = []
                for row in cursor.fetchall():
                    level, side, amount, price, order_id, status = row
                    grid.append({
                        "level": level,
                        "side": side,
                        "amount": amount,
                        "price": price,
                        "order_id": order_id,
                        "status": status
                    })
                
                if grid:
                    self.grids[symbol] = grid
                    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Ç–∫–∞ –¥–ª—è {symbol}: {len(grid)} —É—Ä–æ–≤–Ω–µ–π")
            
            conn.close()
            return len(symbols) > 0
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ç–æ–∫: {e}")
            return False
    
    def create_grid(self, symbol: str, current_price: float):
        """–°–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É –¥–ª—è –ø–∞—Ä—ã"""
        try:
            grid = []
            base_amount = self.config.level_amount / current_price
            
            # –°–æ–∑–¥–∞—ë–º —É—Ä–æ–≤–Ω–∏ –ø–æ–∫—É–ø–∫–∏ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            for i in range(self.config.grid_levels):
                buy_price = current_price * (1 - self.config.grid_spread * (i + 1))
                buy_price = round(buy_price, 6)
                
                grid.append({
                    "level": i,
                    "side": "buy",
                    "price": buy_price,
                    "amount": base_amount,
                    "status": "pending"
                })
            
            # –°–æ–∑–¥–∞—ë–º —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–¥–∞–∂–∏ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            for i in range(self.config.grid_levels):
                sell_price = current_price * (1 + self.config.grid_spread * (i + 1))
                sell_price = round(sell_price, 6)
                
                grid.append({
                    "level": i,
                    "side": "sell", 
                    "price": sell_price,
                    "amount": base_amount,
                    "status": "pending"
                })
            
            self.grids[symbol] = grid
            self.save_grid_to_db(symbol, grid)
            print(f"–°–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {symbol}: {len(grid)} —É—Ä–æ–≤–Ω–µ–π")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏ {symbol}: {e}")
    
    def save_grid_to_db(self, symbol: str, grid: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Ç–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            for level in grid:
                cursor.execute("""
                    INSERT INTO grids (symbol, level, side, amount, price)
                    VALUES (?, ?, ?, ?, ?)
                """, (symbol, level["level"], level["side"], level["amount"], level["price"]))
            
            conn.commit()
            conn.close()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ç–∫–∏ –≤ –ë–î: {e}")
    
    def place_grid_orders(self, symbol: str):
        """–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä–∞ —Å–µ—Ç–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞"""
        try:
            if symbol not in self.grids:
                return
            
            grid = self.grids[symbol]
            placed_orders = 0
            skipped_orders = 0
            
            for level in grid:
                if level["status"] == "pending":
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º—É—é —Å—É–º–º—É –¥–ª—è –æ—Ä–¥–µ—Ä–∞
                    required_amount = level["amount"] * level["price"]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
                    if self.check_available_balance(required_amount):
                        order = self.client.place_order(
                            symbol=symbol,
                            side=level["side"],
                            amount=level["amount"],
                            price=level["price"]
                        )
                        
                        if order and "id" in order:
                            level["order_id"] = order["id"]
                            level["status"] = "active"
                            placed_orders += 1
                            print(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â—ë–Ω: {symbol} {level['side']} {level['amount']:.2f} @ {level['price']}")
                        
                        time.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏
                    else:
                        skipped_orders += 1
                        print(f"‚è≠Ô∏è –û—Ä–¥–µ—Ä –ø—Ä–æ–ø—É—â–µ–Ω: {symbol} {level['side']} {level['amount']:.2f} @ {level['price']} (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤)")
            
            print(f"üìä {symbol}: —Ä–∞–∑–º–µ—â–µ–Ω–æ {placed_orders} –æ—Ä–¥–µ—Ä–æ–≤, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_orders}")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ —Å–µ—Ç–∫–∏ {symbol}: {e}")
    
    def sync_orders_with_exchange(self, symbol: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–æ–≤ —Å –±–∏—Ä–∂–µ–π"""
        try:
            if symbol not in self.grids:
                return
            
            grid = self.grids[symbol]
            for level in grid:
                if level["order_id"] and level["status"] == "active":
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ —Å –±–∏—Ä–∂–∏
                        order = self.client.exchange.fetch_order(level["order_id"], symbol)
                        if order:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –∏ –ø–∞–º—è—Ç–∏
                            new_status = order["status"]
                            if new_status != level["status"]:
                                level["status"] = new_status
                                self.update_order_status_in_db(symbol, level["level"], level["side"], new_status)
                                
                                if new_status == "filled":
                                    print(f"‚úÖ –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω: {symbol} {level['side']} {level['amount']} @ {level['price']}")
                                elif new_status == "canceled":
                                    print(f"‚ùå –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω: {symbol} {level['side']} {level['amount']} @ {level['price']}")
                    
                    except Exception as e:
                        # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω –∏—Å–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω—ë–Ω
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ {level['order_id']}: {e}")
                        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–π
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤ {symbol}: {e}")
    
    def update_order_status_in_db(self, symbol: str, level: int, side: str, status: str):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                UPDATE grids 
                SET status = ? 
                WHERE symbol = ? AND level = ? AND side = ?
            """, (status, symbol, level, side))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î: {e}")
    
    def check_and_recreate_orders(self, symbol: str):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å —É—á—ë—Ç–æ–º –±–∞–ª–∞–Ω—Å–∞"""
        try:
            if symbol not in self.grids:
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            current_balance = self.client.get_balance()
            print(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance:.2f} USDT")
            
            grid = self.grids[symbol]
            orders_to_recreate = []
            
            for level in grid:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –æ—Ä–¥–µ—Ä (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω)
                if level["status"] in ["filled", "canceled", "pending"] or not level.get("order_id"):
                    orders_to_recreate.append(level)
            
            if orders_to_recreate:
                print(f"üîÑ {symbol}: –Ω–∞–π–¥–µ–Ω–æ {len(orders_to_recreate)} –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è")
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                ticker = self.client.get_ticker(symbol)
                if ticker and "last" in ticker:
                    current_price = ticker["last"]
                    
                    for level in orders_to_recreate:
                        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –¥–ª—è —É—Ä–æ–≤–Ω—è
                        if level["side"] == "buy":
                            new_price = current_price * (1 - self.config.grid_spread * (level["level"] + 1))
                        else:  # sell
                            new_price = current_price * (1 + self.config.grid_spread * (level["level"] + 1))
                        
                        new_price = round(new_price, 6)
                        level["price"] = new_price
                        level["status"] = "pending"
                        level["order_id"] = None
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                        self.update_order_in_db(symbol, level["level"], level["side"], new_price, None, "pending")
                    
                    # –†–∞–∑–º–µ—â–∞–µ–º –Ω–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞)
                    self.place_grid_orders(symbol)
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è {symbol}")
            else:
                print(f"‚úÖ {symbol}: –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ {symbol}: {e}")
    
    def update_order_in_db(self, symbol: str, level: int, side: str, price: float, order_id: str, status: str):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                UPDATE grids 
                SET price = ?, order_id = ?, status = ? 
                WHERE symbol = ? AND level = ? AND side = ?
            """, (price, order_id, status, symbol, level, side))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –≤ –ë–î: {e}")

# ========== –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ==========
def main():
    print("üöÄ Grid Trading Bot –∑–∞–ø—É—â–µ–Ω!")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config = GridConfig()
    client = BybitClient(config)
    grid_manager = GridManager(client, config)
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ç–∫–∏
    has_existing_grids = grid_manager.load_existing_grids()
    
    if has_existing_grids:
        print("üìã –ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ç–∫–∏. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞...")
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Å –±–∏—Ä–∂–µ–π
        for symbol in grid_manager.grids.keys():
            grid_manager.sync_orders_with_exchange(symbol)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞
            grid_manager.check_and_recreate_orders(symbol)
    else:
        print("üìù –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ...")
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–æ–∫ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
        for symbol in config.symbols:
            try:
                ticker = client.get_ticker(symbol)
                if ticker and "last" in ticker:
                    current_price = ticker["last"]
                    grid_manager.create_grid(symbol, current_price)
                    grid_manager.place_grid_orders(symbol)
                    print(f"–°–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {symbol}")
                else:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {symbol}: {e}")
    
    print("‚úÖ –í—Å–µ —Å–µ—Ç–∫–∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω...")
    
    # –ë–ï–°–ö–û–ù–ï–ß–ù–´–ô –¶–ò–ö–õ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
    while True:
        try:
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç–æ–∫
            for symbol in grid_manager.grids.keys():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–æ–≤
                ticker = client.get_ticker(symbol)
                if ticker and "last" in ticker:
                    current_price = ticker["last"]
                    print(f"üí∞ {symbol}: —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {current_price}")
                    
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–æ–≤ —Å –±–∏—Ä–∂–µ–π
                    grid_manager.sync_orders_with_exchange(symbol)
                    
                    # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ—Ä–¥–µ—Ä–∞
                    if int(time.time()) % 300 < 60:  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                        grid_manager.check_and_recreate_orders(symbol)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (1 –º–∏–Ω—É—Ç–∞)
            time.sleep(60)
            
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            time.sleep(10)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

if __name__ == "__main__":
    main()

