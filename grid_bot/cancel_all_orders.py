#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ Bybit
–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Ç–∫–∏
"""

import os
import ccxt
from dotenv import load_dotenv
import time

def cancel_all_orders():
    """–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ Bybit"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
    api_key = os.environ.get("BYBIT_API_KEY")
    api_secret = os.environ.get("BYBIT_API_SECRET")
    
    if not api_key or not api_secret:
        print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit
        exchange = ccxt.bybit({
            "apiKey": api_key,
            "secret": api_secret,
            "enableRateLimit": True,
            "options": {"defaultType": "unified"}
        })
        
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit...")
        exchange.load_markets()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
        print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤...")
        open_orders = exchange.fetch_open_orders()
        
        if not open_orders:
            print("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(open_orders)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–∞—Ö
        total_value = 0
        for order in open_orders:
            symbol = order['symbol']
            side = order['side']
            amount = order['amount']
            price = order['price']
            order_id = order['id']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞
            if side == 'buy':
                value = amount * price
            else:
                value = amount * price
            
            total_value += value
            
            print(f"   {symbol} {side} {amount:.2f} @ {price:.6f} = {value:.2f} USDT (ID: {order_id})")
        
        print(f"üí∞ –û–±—â–∞—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {total_value:.2f} USDT")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = input("\n‚ùì –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞? (y/N): ")
        if confirm.lower() != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞
        print("üîÑ –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤...")
        cancelled_count = 0
        
        for order in open_orders:
            try:
                result = exchange.cancel_order(order['id'], order['symbol'])
                if result:
                    cancelled_count += 1
                    print(f"‚úÖ –û—Ç–º–µ–Ω—ë–Ω –æ—Ä–¥–µ—Ä {order['symbol']} {order['side']} {order['amount']:.2f}")
                time.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ {order['id']}: {e}")
        
        print(f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ {cancelled_count} –∏–∑ {len(open_orders)} –æ—Ä–¥–µ—Ä–æ–≤")
        print(f"üí∞ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {total_value:.2f} USDT")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        print("\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...")
        balance = exchange.fetch_balance()
        if 'USDT' in balance:
            free_usdt = balance['USDT']['free']
            print(f"‚úÖ –°–≤–æ–±–æ–¥–Ω—ã–π USDT: {free_usdt:.2f}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    cancel_all_orders()
