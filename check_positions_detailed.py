#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π, –æ—Ä–¥–µ—Ä–æ–≤ –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –≥–¥–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–∫—Ç–∏–≤—ã
"""

import os
import json
import time
import urllib.request
import urllib.parse
import hmac
import hashlib
from typing import Dict, List

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
API_KEY = os.environ.get("BYBIT_API_KEY", "")
API_SECRET = os.environ.get("BYBIT_API_SECRET", "")
ACCOUNT_TYPE = os.environ.get("BYBIT_ACCOUNT_TYPE", "unified")

if not API_KEY or not API_SECRET:
    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã API –∫–ª—é—á–∏ Bybit")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("export BYBIT_API_KEY=–≤–∞—à_–∫–ª—é—á")
    print("export BYBIT_API_SECRET=–≤–∞—à_—Å–µ–∫—Ä–µ—Ç")
    exit(1)

# ========== BYBIT API –ö–õ–ò–ï–ù–¢ ==========
class BybitClient:
    def __init__(self, api_key: str, api_secret: str):
        self.api_key = api_key
        self.api_secret = api_secret
        self.base_url = "https://api.bybit.com"
    
    def _sign_request(self, params: str) -> str:
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è Bybit"""
        return hmac.new(
            self.api_secret.encode('utf-8'),
            params.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
    
    def _make_request(self, endpoint: str, params: Dict = None, method: str = "GET") -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å API –∑–∞–ø—Ä–æ—Å"""
        try:
            timestamp = str(int(time.time() * 1000))
            
            if params is None:
                params = {}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params.update({
                "api_key": self.api_key,
                "timestamp": timestamp,
                "recv_window": "5000"
            })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            sorted_params = "&".join([f"{k}={v}" for k, v in sorted(params.items())])
            signature = self._sign_request(sorted_params)
            params["sign"] = signature
            
            url = f"{self.base_url}{endpoint}"
            
            if method == "GET":
                url += "?" + "&".join([f"{k}={v}" for k, v in params.items()])
                request = urllib.request.Request(url)
            else:
                data = urllib.parse.urlencode(params).encode('utf-8')
                request = urllib.request.Request(url, data=data, method=method)
                request.add_header('Content-Type', 'application/x-www-form-urlencoded')
            
            with urllib.request.urlopen(request) as response:
                result = json.loads(response.read().decode())
                return result
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {}
    
    def get_wallet_balance(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞"""
        endpoint = "/v5/account/wallet-balance"
        params = {"accountType": ACCOUNT_TYPE}
        return self._make_request(endpoint, params)
    
    def get_positions(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏"""
        endpoint = "/v5/position/list"
        params = {"category": "linear"}
        return self._make_request(endpoint, params)
    
    def get_open_orders(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞"""
        endpoint = "/v5/order/realtime"
        params = {"category": "linear"}
        return self._make_request(endpoint, params)
    
    def get_spot_orders(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–æ—Ç –æ—Ä–¥–µ—Ä–∞"""
        endpoint = "/v5/order/realtime"
        params = {"category": "spot"}
        return self._make_request(endpoint, params)
    
    def get_account_info(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        endpoint = "/v5/account/info"
        return self._make_request(endpoint, params={})

# ========== –£–¢–ò–õ–ò–¢–´ ==========
def safe_float(value, default=0.0):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
    try:
        if value is None or value == "":
            return default
        return float(value)
    except (ValueError, TypeError):
        return default

# ========== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ==========
def main():
    print("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç
    client = BybitClient(API_KEY, API_SECRET)
    
    # 1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ...")
    account_info = client.get_account_info()
    
    if "result" in account_info:
        info = account_info["result"]
        print(f"  –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {info.get('accountType', 'Unknown')}")
        print(f"  –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: {info.get('marginMode', 'Unknown')}")
        print(f"  –°—Ç–∞—Ç—É—Å: {info.get('accountStatus', 'Unknown')}")
    else:
        print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    print("\nüí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞...")
    balance = client.get_wallet_balance()
    
    if "result" in balance and "list" in balance["result"]:
        account = balance["result"]["list"][0]
        
        print(f"  –ê–∫–∫–∞—É–Ω—Ç: {account['accountType']}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
        total_locked = 0
        total_free = 0
        
        for coin in account.get("coin", []):
            currency = coin.get("coin", "Unknown")
            total = safe_float(coin.get("walletBalance", 0))
            free = safe_float(coin.get("availableToWithdraw", 0))
            locked = safe_float(coin.get("locked", 0))
            usd_value = safe_float(coin.get("usdValue", 0))
            
            if total > 0:
                print(f"  {currency}:")
                print(f"    Total: {total:.8f}")
                print(f"    Free: {free:.8f}")
                print(f"    Locked: {locked:.8f}")
                print(f"    USD Value: {usd_value:.4f}")
                
                if free == 0 and total > 0:
                    print(f"    ‚ö†Ô∏è –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù!")
                    total_locked += usd_value
                else:
                    total_free += usd_value
        
        print(f"\nüìä –ò—Ç–æ–≥–æ:")
        print(f"  –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {total_locked:.2f} USD")
        print(f"  –°–≤–æ–±–æ–¥–Ω–æ: {total_free:.2f} USD")
    else:
        print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
        return
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
    print("\nüìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏...")
    positions = client.get_positions()
    
    if "result" in positions and "list" in positions["result"]:
        pos_list = positions["result"]["list"]
        active_positions = [p for p in pos_list if safe_float(p.get("size", 0)) > 0]
        
        if active_positions:
            print(f"  –ù–∞–π–¥–µ–Ω–æ {len(active_positions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:")
            for pos in active_positions:
                symbol = pos.get("symbol", "Unknown")
                side = pos.get("side", "Unknown")
                size = safe_float(pos.get("size", 0))
                avg_price = safe_float(pos.get("avgPrice", 0))
                pnl = safe_float(pos.get("unrealisedPnl", 0))
                margin = safe_float(pos.get("positionIM", 0))
                
                print(f"    {symbol} {side} {size:.6f} @ {avg_price:.4f}")
                print(f"      PnL: {pnl:.4f} | Margin: {margin:.4f}")
        else:
            print("  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç")
    else:
        print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
    print("\nüìù –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ (—Ñ—å—é—á–µ—Ä—Å—ã)...")
    futures_orders = client.get_open_orders()
    
    if "result" in futures_orders and "list" in futures_orders["result"]:
        orders = futures_orders["result"]["list"]
        active_orders = [o for o in orders if o.get("orderStatus") == "New"]
        
        if active_orders:
            print(f"  –ù–∞–π–¥–µ–Ω–æ {len(active_orders)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤:")
            for order in active_orders:
                symbol = order.get("symbol", "Unknown")
                side = order.get("side", "Unknown")
                qty = safe_float(order.get("qty", 0))
                price = safe_float(order.get("price", 0))
                order_id = order.get("orderId", "Unknown")
                
                print(f"    {symbol} {side} {qty:.6f} @ {price:.4f} (ID: {order_id})")
        else:
            print("  ‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç")
    else:
        print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–¥–µ—Ä–∞ —Ñ—å—é—á–µ—Ä—Å–æ–≤")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–æ—Ç –æ—Ä–¥–µ—Ä–∞
    print("\nüìù –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ (—Å–ø–æ—Ç)...")
    spot_orders = client.get_spot_orders()
    
    if "result" in spot_orders and "list" in spot_orders["result"]:
        orders = spot_orders["result"]["list"]
        active_orders = [o for o in orders if o.get("orderStatus") == "New"]
        
        if active_orders:
            print(f"  –ù–∞–π–¥–µ–Ω–æ {len(active_orders)} –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–ø–æ—Ç –æ—Ä–¥–µ—Ä–æ–≤:")
            for order in active_orders:
                symbol = order.get("symbol", "Unknown")
                side = order.get("side", "Unknown")
                qty = safe_float(order.get("qty", 0))
                price = safe_float(order.get("price", 0))
                order_id = order.get("orderId", "Unknown")
                
                print(f"    {symbol} {side} {qty:.6f} @ {price:.4f} (ID: {order_id})")
        else:
            print("  ‚úÖ –û—Ç–∫—Ä—ã—Ç—ã—Ö —Å–ø–æ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç")
    else:
        print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–æ—Ç –æ—Ä–¥–µ—Ä–∞")
    
    # 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n" + "=" * 70)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if total_locked > 0:
        print(f"  üîí –£ –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ {total_locked:.2f} USD –∞–∫—Ç–∏–≤–æ–≤")
        print("  üìã –î–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –Ω—É–∂–Ω–æ:")
        print("    1. –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞")
        print("    2. –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
        print("    3. –î–æ–∂–¥–∞—Ç—å—Å—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º–∞—Ä–∂–∏")
        print("    4. –ó–∞—Ç–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ USDT")
    else:
        print("  ‚úÖ –í—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–≤–æ–±–æ–¥–Ω—ã!")
        print("  üöÄ –ú–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ USDT")

if __name__ == "__main__":
    main()
