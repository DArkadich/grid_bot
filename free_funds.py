#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç L1 Bot –ø–æ–∑–∏—Ü–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–æ—Ç –∏ –ø–µ—Ä–ø–µ—Ç—É–∞–ª –ø–æ–∑–∏—Ü–∏–∏, –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∏—Ö –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è USDT
"""

import os
import ccxt
import time
from typing import Dict, List

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
API_KEY = os.environ.get("BYBIT_API_KEY", "")
API_SECRET = os.environ.get("BYBIT_API_SECRET", "")
ACCOUNT_TYPE = os.environ.get("BYBIT_ACCOUNT_TYPE", "unified")

if not API_KEY or not API_SECRET:
    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã API –∫–ª—é—á–∏ Bybit")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("export BYBIT_API_KEY=–≤–∞—à_–∫–ª—é—á")
    print("export BYBIT_API_SECRET=–≤–∞—à_—Å–µ–∫—Ä–µ—Ç")
    exit(1)

# ========== –ö–õ–ò–ï–ù–¢ –ë–ò–†–ñ–ò ==========
def create_exchange():
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç Bybit"""
    exchange = ccxt.bybit({
        "apiKey": API_KEY,
        "secret": API_SECRET,
        "enableRateLimit": True,
        "options": {"defaultType": "unified"}
    })
    exchange.load_markets()
    return exchange

# ========== –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê ==========
def check_balance(exchange) -> Dict:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        balance = exchange.fetch_balance(params={"type": "unified"})
        
        print("üí∞ –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞:")
        print(f"  USDT Total: {balance.get('total', {}).get('USDT', 0):.2f}")
        print(f"  USDT Free: {balance.get('free', {}).get('USDT', 0):.2f}")
        print(f"  USDT Used: {balance.get('used', {}).get('USDT', 0):.2f}")
        
        return balance
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return {}

# ========== –ü–†–û–í–ï–†–ö–ê –ü–û–ó–ò–¶–ò–ô ==========
def check_positions(exchange) -> List[Dict]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        positions = exchange.private_get_v5_position_list({
            "category": "linear"
        })
        
        pos_list = positions.get("result", {}).get("list", [])
        active_positions = [p for p in pos_list if float(p.get("size", 0)) > 0]
        
        print(f"\nüìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {len(active_positions)}")
        for pos in active_positions:
            symbol = pos.get("symbol", "Unknown")
            side = pos.get("side", "Unknown")
            size = float(pos.get("size", 0))
            avg_price = float(pos.get("avgPrice", 0))
            pnl = float(pos.get("unrealisedPnl", 0))
            
            print(f"  {symbol} {side} {size:.6f} @ {avg_price:.4f} PnL: {pnl:.4f}")
        
        return active_positions
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
        return []

# ========== –ü–†–û–í–ï–†–ö–ê –°–ü–û–¢ –ë–ê–õ–ê–ù–°–ê ==========
def check_spot_balances(exchange) -> List[Dict]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–æ—Ç –±–∞–ª–∞–Ω—Å—ã (–Ω–µ USDT)"""
    try:
        balance = exchange.fetch_balance(params={"type": "unified"})
        spot_balances = []
        
        for currency, amount in balance.get("total", {}).items():
            if currency != "USDT" and float(amount) > 0.001:  # –ò—Å–∫–ª—é—á–∞–µ–º –ø—ã–ª—å
                free_amount = float(balance.get("free", {}).get(currency, 0))
                spot_balances.append({
                    "currency": currency,
                    "total": float(amount),
                    "free": free_amount
                })
        
        print(f"\nü™ô –°–ø–æ—Ç –±–∞–ª–∞–Ω—Å—ã (–Ω–µ USDT): {len(spot_balances)}")
        for bal in spot_balances:
            print(f"  {bal['currency']}: {bal['total']:.6f} (free: {bal['free']:.6f})")
        
        return spot_balances
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Ç –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
        return []

# ========== –ó–ê–ö–†–´–¢–ò–ï –ü–û–ó–ò–¶–ò–ô ==========
def close_position(exchange, position: Dict) -> bool:
    """–ó–∞–∫—Ä—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é"""
    try:
        symbol = position.get("symbol", "")
        side = position.get("side", "")
        size = float(position.get("size", 0))
        
        if size <= 0:
            return False
        
        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        close_side = "sell" if side == "buy" else "buy"
        
        print(f"üîÑ –ó–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é {symbol} {side} {size:.6f} -> {close_side}")
        
        order = exchange.create_order(
            symbol=symbol,
            type="market",
            side=close_side,
            amount=size,
            params={"reduceOnly": True}
        )
        
        print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞: {order.get('id', 'Unknown')}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ {position.get('symbol', 'Unknown')}: {e}")
        return False

# ========== –ü–†–û–î–ê–ñ–ê –°–ü–û–¢ –ê–ö–¢–ò–í–û–í ==========
def sell_spot_assets(exchange, spot_balances: List[Dict]) -> bool:
    """–ü—Ä–æ–¥–∞—Ç—å —Å–ø–æ—Ç –∞–∫—Ç–∏–≤—ã –∑–∞ USDT"""
    try:
        for bal in spot_balances:
            if bal["free"] <= 0.001:
                continue
                
            currency = bal["currency"]
            amount = bal["free"]
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–∞—Ç—å –∑–∞ USDT
            try:
                symbol = f"{currency}/USDT"
                if symbol in exchange.markets:
                    print(f"üîÑ –ü—Ä–æ–¥–∞—é {amount:.6f} {currency} –∑–∞ USDT")
                    
                    order = exchange.create_order(
                        symbol=symbol,
                        type="market",
                        side="sell",
                        amount=amount
                    )
                    
                    print(f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ: {order.get('id', 'Unknown')}")
                    time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å {currency}: {e}")
                
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ —Å–ø–æ—Ç –∞–∫—Ç–∏–≤–æ–≤: {e}")
        return False

# ========== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ==========
def main():
    print("üöÄ –°–∫—Ä–∏–ø—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç L1 Bot")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç
    exchange = create_exchange()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    balance = check_balance(exchange)
    positions = check_positions(exchange)
    spot_balances = check_spot_balances(exchange)
    
    print("\n" + "=" * 50)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏—Ö
    if positions:
        print("üîÑ –ó–∞–∫—Ä—ã–≤–∞—é –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏...")
        for pos in positions:
            close_position(exchange, pos)
            time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–æ—Ç –∞–∫—Ç–∏–≤—ã - –ø—Ä–æ–¥–∞—ë–º –∏—Ö
    if spot_balances:
        print("üîÑ –ü—Ä–æ–¥–∞—é —Å–ø–æ—Ç –∞–∫—Ç–∏–≤—ã –∑–∞ USDT...")
        sell_spot_assets(exchange, spot_balances)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    print("\n" + "=" * 50)
    print("üìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞:")
    final_balance = check_balance(exchange)
    
    free_usdt = final_balance.get("free", {}).get("USDT", 0)
    if free_usdt > 10:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {free_usdt:.2f} USDT!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å Grid Trading Bot")
    else:
        print("‚ö†Ô∏è USDT –≤—Å—ë –µ—â—ë –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è Grid Bot")
        print("–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")

if __name__ == "__main__":
    main()
